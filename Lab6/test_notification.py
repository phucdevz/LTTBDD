#!/usr/bin/env python3
"""
Script ƒë·ªÉ test g·ª≠i th√¥ng b√°o ƒë·∫©y t·ª´ server s·ª≠ d·ª•ng Firebase Cloud Messaging
"""

import requests
import json
import sys

# Firebase Server Key - L·∫•y t·ª´ Firebase Console > Project Settings > Cloud Messaging
FIREBASE_SERVER_KEY = "YOUR_SERVER_KEY_HERE"

# FCM endpoint
FCM_URL = "https://fcm.googleapis.com/fcm/send"

def send_notification(device_token, title, body, data=None):
    """
    G·ª≠i th√¥ng b√°o ƒë·∫øn device c·ª• th·ªÉ
    
    Args:
        device_token (str): FCM token c·ªßa device
        title (str): Ti√™u ƒë·ªÅ th√¥ng b√°o
        body (str): N·ªôi dung th√¥ng b√°o
        data (dict): D·ªØ li·ªáu t√πy ch·ªânh
    """
    
    headers = {
        'Authorization': f'key={FIREBASE_SERVER_KEY}',
        'Content-Type': 'application/json'
    }
    
    payload = {
        'to': device_token,
        'notification': {
            'title': title,
            'body': body,
            'sound': 'default',
            'badge': '1'
        },
        'data': data or {},
        'priority': 'high'
    }
    
    try:
        response = requests.post(FCM_URL, headers=headers, data=json.dumps(payload))
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success') == 1:
                print("‚úÖ Th√¥ng b√°o g·ª≠i th√†nh c√¥ng!")
                print(f"Message ID: {result.get('results', [{}])[0].get('message_id')}")
            else:
                print("‚ùå G·ª≠i th√¥ng b√°o th·∫•t b·∫°i!")
                print(f"Error: {result}")
        else:
            print(f"‚ùå HTTP Error: {response.status_code}")
            print(f"Response: {response.text}")
            
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

def send_topic_notification(topic, title, body, data=None):
    """
    G·ª≠i th√¥ng b√°o ƒë·∫øn topic
    
    Args:
        topic (str): T√™n topic (v√≠ d·ª•: 'general', 'news')
        title (str): Ti√™u ƒë·ªÅ th√¥ng b√°o
        body (str): N·ªôi dung th√¥ng b√°o
        data (dict): D·ªØ li·ªáu t√πy ch·ªânh
    """
    
    headers = {
        'Authorization': f'key={FIREBASE_SERVER_KEY}',
        'Content-Type': 'application/json'
    }
    
    payload = {
        'to': f'/topics/{topic}',
        'notification': {
            'title': title,
            'body': body,
            'sound': 'default',
            'badge': '1'
        },
        'data': data or {},
        'priority': 'high'
    }
    
    try:
        response = requests.post(FCM_URL, headers=headers, data=json.dumps(payload))
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success') == 1:
                print("‚úÖ Th√¥ng b√°o topic g·ª≠i th√†nh c√¥ng!")
                print(f"Message ID: {result.get('results', [{}])[0].get('message_id')}")
            else:
                print("‚ùå G·ª≠i th√¥ng b√°o topic th·∫•t b·∫°i!")
                print(f"Error: {result}")
        else:
            print(f"‚ùå HTTP Error: {response.status_code}")
            print(f"Response: {response.text}")
            
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

def main():
    print("üöÄ SmartTasks - Push Notification Tester")
    print("=" * 50)
    
    # Ki·ªÉm tra server key
    if FIREBASE_SERVER_KEY == "YOUR_SERVER_KEY_HERE":
        print("‚ùå Vui l√≤ng c·∫≠p nh·∫≠t FIREBASE_SERVER_KEY trong script!")
        print("L·∫•y Server Key t·ª´: Firebase Console > Project Settings > Cloud Messaging")
        return
    
    while True:
        print("\nüìã Ch·ªçn lo·∫°i th√¥ng b√°o:")
        print("1. G·ª≠i th√¥ng b√°o ƒë·∫øn device c·ª• th·ªÉ")
        print("2. G·ª≠i th√¥ng b√°o ƒë·∫øn topic")
        print("3. Tho√°t")
        
        choice = input("\nNh·∫≠p l·ª±a ch·ªçn (1-3): ").strip()
        
        if choice == "1":
            device_token = input("Nh·∫≠p FCM Device Token: ").strip()
            title = input("Nh·∫≠p ti√™u ƒë·ªÅ: ").strip()
            body = input("Nh·∫≠p n·ªôi dung: ").strip()
            
            # D·ªØ li·ªáu t√πy ch·ªânh
            task_id = input("Nh·∫≠p Task ID (optional): ").strip()
            data = {"taskId": task_id} if task_id else None
            
            send_notification(device_token, title, body, data)
            
        elif choice == "2":
            topic = input("Nh·∫≠p t√™n topic (v√≠ d·ª•: general): ").strip()
            title = input("Nh·∫≠p ti√™u ƒë·ªÅ: ").strip()
            body = input("Nh·∫≠p n·ªôi dung: ").strip()
            
            # D·ªØ li·ªáu t√πy ch·ªânh
            task_id = input("Nh·∫≠p Task ID (optional): ").strip()
            data = {"taskId": task_id} if task_id else None
            
            send_topic_notification(topic, title, body, data)
            
        elif choice == "3":
            print("üëã T·∫°m bi·ªát!")
            break
            
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    main() 